export SNAPSTORE_DEPENDENCY_DIR=~/src/siab-dependencies

## LXD ##################################################### 

# lxc list long
function lll {
    lxc list -cns4 \
        | grep '\w' \
        | tr -d '|' \
        | colout '(^\s+NAME\s.+)|(RUNNING)|(STOPPED)' white,green,red bold,normal
}

# lxc list short
function lls {
    lxc list -cn --format=csv
}

# Define lxc container name aliases.
declare -A laliases
# siab container(s)
laliases[delta]=siab-xenial
laliases[devicegw]=siab-bionic
laliases[find]=siab-bionic
laliases[ident]=siab-bionic
laliases[publishergw]=siab-xenial
laliases[revs]=siab-bionic
laliases[schemas]=siab-xenial
laliases[snapdevicegw]=siab-bionic
laliases[snapfind]=siab-bionic
laliases[snapident]=siab-bionic
laliases[snaprevs]=siab-bionic
# storage container
laliases[storage]=snapstorage-xenial
laliases[snapstorage]=snapstorage-xenial
# charm-migration container
laliases[charm-migration]=charm-migration-focal

# Given a project name or container alias,
# return the actual hosting container name.
function lalias {
    alias="$1"
    # If an alias was given, return the corresponding container name.
    if [ -n "$alias" ]; then
        # If the given alias is recognized, return the corresponding container
        container="${laliases[$alias]}"
        if [ -n "$container" ]; then
            echo "$container"
            return 0
        else
            # Look for the alias in container names.
            for container in $(lls); do
                if [ "$container" = "$alias" ]; then
                    echo "$container"
                    return 0
                fi
            done
            # Alias not recognized.
            echo "lalias: Alias '$alias' not recognized." >&2
            return 2
        fi
    else
        # No alias was given. Display all aliases.
        containers=$(echo ${laliases[@]} | tr ' ' '\n' | sort -u)
        for container in $containers; do
            echo "$container"
            for alias in ${!laliases[@]}; do
                if [ ${laliases[$alias]} = $container ]; then
                    echo -e "\t$alias"
                fi
            done
        done
    fi
}

function lssh {
    if [ "$#" -ne 1 ] ; then
        echo "Usage: lssh <projectname>"
        return
    fi
    alias="$1"
    container=$(lalias $alias)

    tname="$container"
    destdir="$PWD"
    if [ -d "$HOME/src/$alias" ]; then
        tname="$alias on $container"
        if [ "$PWD" = "$HOME" ]; then
            destdir="$HOME/src/$alias"
        fi
    fi
    termname "$tname"

    host="$container.lxd"
    # # Old old method, scraping IP from output of 'lxc list'
    # host=$(lxc list $container -c 4 | grep eth0 | cut -d' ' -f2)

    # ssh to container.
    # Requires containers to have IPv4 address,
    # and name resolution to be working.
    # -A: Forward ssh-agent. So we can, for example,
    #     hit github using passphrases cached by ssh-agent.
    # -t: Force pseudo-terminal allocation. (I forget why.)
    # See ~/docs/config/lxd.dns.md for DNS resolution of .lxd domain
    ssh -A -t "${host}" -- "cd $destdir && exec $SHELL -l"

    # # Old method of connecting, for when container network is broken.
    # # exec a login session in the container, as jhartley.
    # # The extra nested bash invocation is to cd to the given directory.
    # # Is there an easier way to do that?
    # lxc exec "$container" -- \
    #     sudo --login --user $USER -- \
    #         bash -c "cd $PWD && exec $SHELL -l"

    termname "Terminal"
}

# autocomplete lxc container names
# The 2> is to silence errors when logging into a xenial container, on
# on which lxd doesn't support csv format. But I don't currently use
# subcontainers, so I don't care if this doesn't work there,
# so we can just ignore the error.
# TODO: convert the -W into a -F to get an up-to-date list on demand
# See -F explaination at
# https://unix.stackexchange.com/questions/250262/how-to-use-bashs-complete-or-compgen-c-command-option/250484#250484
complete -W "$(lls 2>/dev/null) $(lalias)" lssh lxc

